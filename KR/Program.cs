namespace KR;
class Program
{
    
    // Внимание! Сборка проекта будет работать только на новых версиях C#9+
    // Если таковой не установлен, то просто анализируем код и при надобности вырезаем из него куски.
    // Особенностью этого проекта в том, что в нем используются глобальные директивы, а также сокращенное указание пространства имен.

    // Спасибо за внимание, переходим в КР :)

    static void Main()
    {

        // Задание 1

        // а) Проверить, входит ли подстрока "123" в строку
        string someStr = "dhfkh123dff";

        if(someStr.Contains("123"))
        {
            Console.WriteLine("someStr contains '123'");
        }
        else
        {
            Console.WriteLine("There are no '123' substring");
        }



        //int n = (int)(new Random().NextInt64()) % 50;

        // б) Создать двумерный массив типа double. Заполнить массив случайными числами
        double[,] array = new double[2,3];  // Создаем массив array с двумя строками и тремя столбцами
        for(int i = 0;i < array.GetLength(0); i++) // array.GetLength(0) возвращает размер нулевого измерения, то есть число "2"
        {
            for(int j = 0;j <array.GetLength(1); j++) // array.GetLength(1) возвращает размер первого измерения, то есть число "3"
            {
                array[i, j] = (new Random()).Next(50); // (new Random()) Возвращает нам ссылку на бызымянную переменную типа Random, которая генерирует случайные значения. Next(50) обозначает, что диапзанон
            }                                                                                                                                                             // значений у нас от 0 до 50
        }


        // Задание 2

        // Создать класс Date с полями day, month, year. Для полей day, month сделать автоматические свойства, а для year свойство только для чтения.
        // Переопределить метод Equals и сравнить два объекта. Перегрузить оператор % так, чтобы Date%1 возвращало поле day, а Date%2 поле month, в остальных случаях выдать исключение

        // Создаем новый класс Date.cs и переходим в новый файл -> (1)
        // Теперь приступаем к проверке всего нами написанного :)


        Date d1 = new Date("12", "seprember", "2022"); // Создаем два объекта класса Date с различными значениями

        Date d2 = new Date("22", "september", "2022");

        if(d1.Equals(d2))  // Проверяем объекты d1 и d2 на эдинтичность
        {
            Console.WriteLine("Dates are equals"); // Если d1 равен d2 (То есть все поля совпадают), то выводим этот текст
        }
        else
        {
            Console.WriteLine("Dates aren't equals"); // В противном случае этот
        }

        Console.WriteLine($"\nChecking operator: {d1 % 1}"); // Проверяем перегрузку оператора '%'. В результате операции d1%1 должно вернутся значение "12"



        // Задание 3

        // Создать класс BelDate, который наследуется от Data и дополнительно реализует свойство status (string). Создать два интерфейса IGood, IBad с методом Plus().
        // Реализовать интерфейсы в классе; для каждого интерфейса метод Plus() имеет свою реализацию

        // Создаем новый класс BelDate и переходим в файл с ним -> (2)
        //

        BelDate beldate = new BelDate("1", "september", "2022"); // Создаем объект нового класса BelDate
        beldate.Status("SomeStr"); // Использование свойства

        ((IGood)beldate).Plus(); // Преобразуем наш объект к интерфейсу IGood и вызываем метод Plus()
        ((IBad)beldate).Plus(); // Преобразуем наш объект к интерфейсу IBad и вызываем метод Plus()

        Date d3 = new BelDate("1", "November", "2022");  // Пример upcast'a. То есть мы создаем ссылку для типа Date, которая хранит ссылку на объект типа BelDate
                                                         // Это возможно т.к. класс Date является базовым для BelDate
    }
}